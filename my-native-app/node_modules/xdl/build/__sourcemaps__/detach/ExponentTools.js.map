{"version":3,"sources":["detach/ExponentTools.js"],"names":["async","url","headers","let","requestOptions","replace","response","await","request","promise","responseBody","body","console","log","manifest","JSON","parse","getManifestAsync","args","length","spawnAsyncQuiet","stdio","cwd","process","spawnAsyncThrowError","e","error","message","spawnAsync","filename","transform","fileString","fs","readFile","newFileString","writeFile","transformFileContentsAsync","plistPath","plistName","emptyConfig","tmpConfigFile","path","join","stringify","plistFilename","getNormalizedPlistFilename","configPlistName","createBlankIOSPropertyListAsync","configFilename","configContents","config","modifyIOSPropertyListAsync","restoreOriginal","cleanIOSPropertyListBackupAsync","dirname","basename","platform","warn","childProcess","dimensions","components","stdout","split","map","c","parseInt","filter","n","isNaN","_","getImageDimensionsAsync","destinationIconPath","projectRoot","defaultIconFilename","ios","iconUrl","saveUrlToPathAsync","icon","saveIconToPathAsync","iconSizes","forEach","iconSize","iconResolutions","iconResolution","iconQualifier","getAppleIconQualifier","iconKey","rawIconFilename","usesDefault","hasOwnProperty","iconFilename","iconSizePx","dims","Error","configureIOSIconsAsync","parseSdkMajorVersion","expSdkVersion","sdkMajorVersion","versionComponents","number","Promise","resolve","reject","stream","createWriteStream","on","getFilesizeInBytes","pipe","pathOrURL","outPath","localPath","existsSync","createReadStream","stats","statSync","fileSizeInBytes","indexOf"],"mappings":"AAAA;;AAEA;;;;;;;;+BAyDAA,WAAgCC,GAAhCD,EAAqCE,OAArCF,EAA8C;AAC5CG,QAAIC,iBAAiB;AACnBH,WAAKA,IAAII,OAAJJ,CAAY,QAAZA,EAAsB,SAAtBA,IAAmC,YADrB;AAEnBC;AAFmB,KAArBC;;AAKAA,QAAIG,WAAWC,MAAMC,sCAAQC,OAARD,CAAgBJ,cAAhBI,CAArBL;AACAA,QAAIO,eAAeJ,SAASK,IAA5BR;AACAS,YAAQC,GAARD,CAAY,iBAAZA,EAA+BF,YAA/BE;AACAT,QAAIW,WAAWC,KAAKC,KAALD,CAAWL,YAAXK,CAAfZ;;AAEA,WAAOW,QAAP;AACF,G;;kBAZeG,gB;;;;;;gCAcfjB,WAAoC,GAAGkB,IAAvClB,EAA6C;AAC3C,QAAIkB,KAAKC,MAALD,KAAgB,CAApB,EAAuB;AACrB,aAAOE,iDAAgBF,KAAK,CAALA,CAAhBE,EAAyBF,KAAK,CAALA,CAAzBE,EAAkC;AACvCC,eAAO,SADgC;AAEvCC,aAAKC,QAAQD,GAARC;AAFkC,OAAlCH,CAAP;AAIF,KALA,MAKO;AACL,aAAOA,iDAAgB,GAAGF,IAAnBE,CAAP;AACF;AACF,G;;kBATeI,oB;;;;;;gCAWfxB,WAA0B,GAAGkB,IAA7BlB,EAAmC;AACjC,QAAI;AACF,aAAOO,MAAMiB,qBAAqB,GAAGN,IAAxBM,CAAb;AACF,KAFA,CAEE,OAAOC,CAAP,EAAU;AACVb,cAAQc,KAARd,CAAca,EAAEE,OAAhBf;AACF;AACF,G;;kBANegB,U;;;;;;gCAQf5B,WAA0C6B,QAA1C7B,EAAoD8B,SAApD9B,EAA+D;AAC7DG,QAAI4B,aAAaxB,MAAMyB,YAAGvB,OAAHuB,CAAWC,QAAXD,CAAoBH,QAApBG,EAA8B,MAA9BA,CAAvB7B;AACAA,QAAI+B,gBAAgBJ,UAAUC,UAAVD,CAApB3B;AACA,QAAI+B,kBAAkB,IAAtB,EAA4B;AAC1B3B,YAAMyB,YAAGvB,OAAHuB,CAAWG,SAAXH,CAAqBH,QAArBG,EAA+BE,aAA/BF,CAANzB;AACF;AACA;AACF,G;;kBAPe6B,0B;;;;;;gCAmBfpC,WAA+CqC,SAA/CrC,EAA0DsC,SAA1DtC,EAAqE;AACnE;AACA,UAAMuC,cAAc,EAApB;AACA,UAAMC,gBAAgBC,cAAKC,IAALD,CAAUJ,SAAVI,EAAsB,GAAEH,SAAU,OAAlCG,CAAtB;AACAlC,UAAMyB,YAAGvB,OAAHuB,CAAWG,SAAXH,CAAqBQ,aAArBR,EAAoCjB,KAAK4B,SAAL5B,CAAewB,WAAfxB,CAApCiB,CAANzB;;AAEA;AACAJ,QAAIyC,gBAAgBC,2BAA2BP,SAA3BO,CAApB1C;AACAA,QAAI2C,kBAAkBL,cAAKC,IAALD,CAAUJ,SAAVI,EAAqBG,aAArBH,CAAtBtC;AACAI,UAAMiB,qBAAqB,QAArBA,EAA+B,CACnC,UADmC,EAEnC,MAFmC,EAGnCgB,aAHmC,EAInC,IAJmC,EAKnCM,eALmC,CAA/BtB,CAANjB;;AAQA;AACAA,UAAMiB,qBAAqB,SAArBA,EAAgC,CAACgB,aAAD,CAAhChB,CAANjB;AACA;AACF,G;;kBApBewC,+B;;;;;AAsBf;;;;;;gCAGA/C,WAA0CqC,SAA1CrC,EAAqDsC,SAArDtC,EAAgE8B,SAAhE9B,EAA2E;AACzEG,QAAIyC,gBAAgBC,2BAA2BP,SAA3BO,CAApB1C;AACAA,QAAI2C,kBAAkBL,cAAKC,IAALD,CAAUJ,SAAVI,EAAqBG,aAArBH,CAAtBtC;AACAA,QAAI6C,iBAAiBP,cAAKC,IAALD,CAAUJ,SAAVI,EAAsB,GAAEH,SAAU,OAAlCG,CAArBtC;;AAEA;AACAI,UAAMiB,qBAAqB,QAArBA,EAA+B,CACnC,UADmC,EAEnC,MAFmC,EAGnCsB,eAHmC,EAInC,IAJmC,EAKnCE,cALmC,CAA/BxB,CAANjB;AAOAJ,QAAI8C,iBAAiB1C,MAAMyB,YAAGvB,OAAHuB,CAAWC,QAAXD,CAAoBgB,cAApBhB,EAAoC,MAApCA,CAA3B7B;AACAA,QAAI+C,MAAJ/C;;AAEA,QAAI;AACF+C,eAASnC,KAAKC,KAALD,CAAWkC,cAAXlC,CAATmC;AACF,KAFA,CAEE,OAAOzB,CAAP,EAAU;AACVb,cAAQC,GAARD,CAAa,iBAAgBoC,cAAe,EAA5CpC,EAA+Ca,CAA/Cb;AACAA,cAAQC,GAARD,CAAY,kCAAZA,EAAgDqC,cAAhDrC;AACAsC,eAAS,EAATA;AACF;;AAEA;AACAA,aAASpB,UAAUoB,MAAVpB,CAAToB;;AAEA;AACA3C,UAAMiB,qBAAqB,SAArBA,EAAgC,CACpCsB,eADoC,EAEnC,GAAEA,eAAgB,MAFiB,CAAhCtB,CAANjB;AAIAA,UAAMyB,YAAGvB,OAAHuB,CAAWG,SAAXH,CAAqBgB,cAArBhB,EAAqCjB,KAAK4B,SAAL5B,CAAemC,MAAfnC,CAArCiB,CAANzB;AACAA,UAAMiB,qBAAqB,QAArBA,EAA+B,CACnC,UADmC,EAEnC,MAFmC,EAGnCwB,cAHmC,EAInC,IAJmC,EAKnCF,eALmC,CAA/BtB,CAANjB;AAOA,WAAO2C,MAAP;AACF,G;;kBAzCeC,0B;;;;;;gCA2CfnD,WACEqC,SADFrC,EAEEsC,SAFFtC,EAGEoD,kBAAkB,IAHpBpD,EAIE;AACAG,QAAIyC,gBAAgBC,2BAA2BP,SAA3BO,CAApB1C;AACAA,QAAI2C,kBAAkBL,cAAKC,IAALD,CAAUJ,SAAVI,EAAqBG,aAArBH,CAAtBtC;AACAA,QAAI6C,iBAAiBP,cAAKC,IAALD,CAAUJ,SAAVI,EAAsB,GAAEH,SAAU,OAAlCG,CAArBtC;;AAEA,QAAIiD,eAAJ,EAAqB;AACnB7C,YAAMiB,qBAAqB,SAArBA,EAAgC,CACnC,GAAEsB,eAAgB,MADiB,EAEpCA,eAFoC,CAAhCtB,CAANjB;AAIF;;AAEAA,UAAMiB,qBAAqB,SAArBA,EAAgC,CAAE,GAAEsB,eAAgB,MAApB,CAAhCtB,CAANjB;AACAA,UAAMiB,qBAAqB,SAArBA,EAAgC,CAACwB,cAAD,CAAhCxB,CAANjB;AACA;AACF,G;;kBAnBe8C,+B;;;;;AAoCf;;;;gCAGArD,WAAuCsD,OAAvCtD,EAAgDuD,QAAhDvD,EAA0D;AACxD,QAAIuB,QAAQiC,QAARjC,KAAqB,QAAzB,EAAmC;AACjCX,cAAQ6C,IAAR7C,CAAa,qDAAbA;AACF;AACAT,QAAIuD,eAAenD,MAAMiB,qBACvB,MADuBA,EAEvB,CAAC,IAAD,EAAO,YAAP,EAAqB,IAArB,EAA2B,aAA3B,EAA0C+B,QAA1C,CAFuB/B,EAGvB;AACEF,WAAKgC;AADP,KAHuB9B,CAAzBrB;AAOAA,QAAIwD,UAAJxD;AACA,QAAI;AACF;AACA,YAAMyD,aAAaF,aAAaG,MAAbH,CAAoBI,KAApBJ,CAA0B,OAA1BA,CAAnB;AACAC,mBAAaC,WAAWG,GAAXH,CAAeI;AAAAA,eAAKC,SAASD,CAATC,EAAY,EAAZA,CAALD;AAAAA,OAAfJ,EAAqCM,MAArCN,CAA4CO;AAAAA,eAAK,CAACC,MAAMD,CAANC,CAAND;AAAAA,OAA5CP,CAAbD;AACF,KAJA,CAIE,OAAOU,CAAP,EAAU,CAAC;AACb,WAAOV,UAAP;AACF,G;;kBAlBeW,uB;;;;;AAoBf;;;;;;;;;;gCAOAtE,WACEc,QADFd,EAEEuE,mBAFFvE,EAGEwE,WAHFxE,EAIE;AACA,QAAIuB,QAAQiC,QAARjC,KAAqB,QAAzB,EAAmC;AACjCX,cAAQ6C,IAAR7C,CAAa,qDAAbA;AACF;AACAT,QAAIsE,mBAAJtE;AACA,QAAIW,SAAS4D,GAAT5D,IAAgBA,SAAS4D,GAAT5D,CAAa6D,OAAjC,EAA0C;AACxCF,4BAAsB,cAAtBA;AACAlE,YAAMqE,mBACJ9D,SAAS4D,GAAT5D,CAAa6D,OADTC,EAEH,GAAEL,mBAAoB,IAAGE,mBAAoB,EAF1CG,CAANrE;AAIF,KANA,MAMO,IAAIO,SAAS6D,OAAb,EAAsB;AAC3BF,4BAAsB,cAAtBA;AACAlE,YAAMqE,mBACJ9D,SAAS6D,OADLC,EAEH,GAAEL,mBAAoB,IAAGE,mBAAoB,EAF1CG,CAANrE;AAIF,KANO,MAMA,IAAIiE,eAAe1D,SAAS+D,IAA5B,EAAkC;AACvCJ,4BAAsB,cAAtBA;AACAlE,YAAMuE,oBACJN,WADIM,EAEJhE,SAAS+D,IAFLC,EAGH,GAAEP,mBAAoB,IAAGE,mBAAoB,EAH1CK,CAANvE;AAKF;;AAEAJ,QAAI4E,YAAY,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,IAArB,CAAhB5E;AACA4E,cAAUC,OAAVD,CAAkBE,oBAAY;AAC5B9E,UAAI+E,eAAJ/E;AACA,UAAI8E,aAAa,EAAjB,EAAqB;AACnB;AACAC,0BAAkB,CAAC,CAAD,EAAI,CAAJ,CAAlBA;AACF,OAHA,MAGO;AACLA,0BAAkB,CAAC,CAAD,EAAI,CAAJ,CAAlBA;AACF;AACAA,sBAAgBF,OAAhBE;AAAAA,uCAAwBlF,WAAMmF,cAANnF,EAAwB;AAC9CG,cAAIiF,gBAAgBC,sBAAsBJ,QAAtBI,EAAgCF,cAAhCE,CAApBlF;AACA;AACAA,cAAImF,UAAW,UAASF,aAAc,EAAtCjF;AACAA,cAAIoF,eAAJpF;AACAA,cAAIqF,cAAc,KAAlBrF;AACA,cAAIW,SAAS4D,GAAT5D,IAAgBA,SAAS4D,GAAT5D,CAAa2E,cAAb3E,CAA4BwE,OAA5BxE,CAApB,EAA0D;AACxD;AACAyE,8BAAmB,WAAUH,aAAc,MAA3CG;AACAhF,kBAAMqE,mBACJ9D,SAAS4D,GAAT5D,CAAawE,OAAbxE,CADI8D,EAEH,GAAEL,mBAAoB,IAAGgB,eAAgB,EAFtCX,CAANrE;AAIF,WAPA,MAOO;AACL;AACAiF,0BAAc,IAAdA;AACA,gBAAIf,mBAAJ,EAAyB;AACvBc,gCAAkBd,mBAAlBc;AACF,aAFA,MAEO;AACL3E,sBAAQ6C,IAAR7C,CACG,iCAAgC0E,OAAQ,wDAD3C1E;AAGA;AACF;AACF;;AAEAT,cAAIuF,eAAgB,UAASN,aAAc,MAA3CjF;AACAA,cAAIwF,aAAaV,WAAWE,cAA5BhF;AACAI,gBAAMiB,qBAAqB,SAArBA,EAAgC,CAAC+D,eAAD,EAAkBG,YAAlB,CAAhClE,EAAiE;AACrEH,mBAAO,SAD8D;AAErEC,iBAAKiD;AAFgE,WAAjE/C,CAANjB;AAIAA,gBAAMiB,qBAAqB,MAArBA,EAA6B,CAAC,IAAD,EAAOmE,UAAP,EAAmBD,YAAnB,CAA7BlE,EAA+D;AACnEH,mBAAO,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,CAD4D,EAC7B;AACtCC,iBAAKiD;AAF8D,WAA/D/C,CAANjB;;AAKA;AACA,gBAAMqF,OAAOrF,MAAM+D,wBACjBC,mBADiBD,EAEjBoB,YAFiBpB,CAAnB;AAIA,cAAI,CAACsB,IAAD,IAASA,KAAKzE,MAALyE,GAAc,CAAvB,IAA4BA,KAAK,CAALA,MAAYA,KAAK,CAALA,CAA5C,EAAqD;AACnD,kBAAM,IAAIC,KAAJ,CACH,+CAA8CH,YAAa,QAAOE,IAAK,EADpE,CAAN;AAGF;;AAEA,cAAI,CAACJ,WAAL,EAAkB;AAChB;AACAjF,kBAAMiB,qBAAqB,SAArBA,EAAgC,CACpCiB,cAAKC,IAALD,CAAU8B,mBAAV9B,EAA+B8C,eAA/B9C,CADoC,CAAhCjB,CAANjB;AAGF;AACD,SAtDD2E;;AAAAA;AAAAA;AAAAA;AAAAA;AAuDD,KA/DDH;;AAiEA;AACA,QAAIN,mBAAJ,EAAyB;AACvBlE,YAAMiB,qBAAqB,SAArBA,EAAgC,CACpCiB,cAAKC,IAALD,CAAU8B,mBAAV9B,EAA+BgC,mBAA/BhC,CADoC,CAAhCjB,CAANjB;AAGF;AACA;AACF,G;;kBAvGeuF,sB;;;;;AAjPf;;AACA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;;;AAEA,SAASC,oBAAT,CAA8BC,aAA9B,EAA6C;AAC3C7F,MAAI8F,kBAAkB,CAAtB9F;AACA,MAAI;AACFA,QAAI+F,oBAAoBF,cACrBlC,KADqBkC,CACf,GADeA,EAErBjC,GAFqBiC,CAEjBG,UAAUlC,SAASkC,MAATlC,EAAiB,EAAjBA,CAFO+B,CAAxB7F;AAGA8F,sBAAkBC,kBAAkB,CAAlBA,CAAlBD;AACF,GALA,CAKE,OAAO5B,CAAP,EAAU,CAAC;AACb,SAAO4B,eAAP;AACF;;AAEA,SAASrB,kBAAT,CAA4B3E,GAA5B,EAAiCwC,IAAjC,EAAuC;AACrC,SAAO,IAAI2D,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAC3CnG,QAAIoG,SAASvE,YAAGwE,iBAAHxE,CAAqBS,IAArBT,CAAb7B;AACAoG,WAAOE,EAAPF,CAAU,OAAVA,EAAmB,MAAM;AACvB,UAAIG,mBAAmBjE,IAAnBiE,IAA2B,EAA/B,EAAmC;AACjC,cAAM,IAAIb,KAAJ,CAAW,yBAAX,CAAN;AACF;AACAQ;AACD,KALDE;AAMAA,WAAOE,EAAPF,CAAU,OAAVA,EAAmBD,MAAnBC;AACA/F,+CAAQP,GAARO,EAAamG,IAAbnG,CAAkB+F,MAAlB/F;AACD,GAVM,CAAP;AAWF;;AAEA,SAASsE,mBAAT,CAA6BN,WAA7B,EAA0CoC,SAA1C,EAAqDC,OAArD,EAA8D;AAC5D,QAAMC,YAAYrE,cAAK4D,OAAL5D,CAAa+B,WAAb/B,EAA0BmE,SAA1BnE,CAAlB;AACA,SAAO,IAAI2D,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAC3CnG,QAAIoG,SAASvE,YAAGwE,iBAAHxE,CAAqB6E,OAArB7E,CAAb7B;AACAoG,WAAOE,EAAPF,CAAU,OAAVA,EAAmB,MAAM;AACvB,UAAIG,mBAAmBG,OAAnBH,IAA8B,EAAlC,EAAsC;AACpC,cAAM,IAAIb,KAAJ,CAAW,yBAAX,CAAN;AACF;AACAQ;AACD,KALDE;AAMAA,WAAOE,EAAPF,CAAU,OAAVA,EAAmBD,MAAnBC;AACA,QAAIvE,YAAG+E,UAAH/E,CAAc8E,SAAd9E,CAAJ,EAA8B;AAC5BA,kBAAGgF,gBAAHhF,CAAoB8E,SAApB9E,EAA+B2E,IAA/B3E,CAAoCuE,MAApCvE;AACF,KAFA,MAEO;AACLxB,iDAAQoG,SAARpG,EAAmBmG,IAAnBnG,CAAwB+F,MAAxB/F;AACF;AACD,GAdM,CAAP;AAeF;;AAEA,SAASkG,kBAAT,CAA4BjE,IAA5B,EAAkC;AAChCtC,MAAI8G,QAAQjF,YAAGkF,QAAHlF,CAAYS,IAAZT,CAAZ7B;AACAA,MAAIgH,kBAAkBF,MAAM,MAANA,CAAtB9G;AACA,SAAOgH,eAAP;AACF;;AA4CA,SAAStE,0BAAT,CAAoCP,SAApC,EAA+C;AAC7CnC,MAAIyC,aAAJzC;AACA,MAAImC,UAAU8E,OAAV9E,CAAkB,GAAlBA,MAA2B,CAAC,CAAhC,EAAmC;AACjCM,oBAAgBN,SAAhBM;AACF,GAFA,MAEO;AACLA,oBAAiB,GAAEN,SAAU,QAA7BM;AACF;AACA,SAAOA,aAAP;AACF;;AA2FA,SAASyC,qBAAT,CAA+BJ,QAA/B,EAAyCE,cAAzC,EAAyD;AACvDhF,MAAIiF,aAAJjF;AACA,MAAIgF,mBAAmB,CAAvB,EAA0B;AACxB;AACAC,oBAAiB,GAAEH,QAAS,IAAGA,QAAS,IAAGE,cAAe,GAA1DC;AACF,GAHA,MAGO;AACLA,oBAAiB,GAAEH,QAAS,IAAGA,QAAS,EAAxCG;AACF;AACA,MAAIH,aAAa,EAAbA,IAAmBA,aAAa,IAApC,EAA0C;AACxC;AACAG,oBAAiB,GAAEA,aAAc,OAAjCA;AACF;AACA,SAAOA,aAAP;AACF,C,QA0IEW,oB,GAAAA,oB;QACAnB,kB,GAAAA,kB;QACAE,mB,GAAAA,mB;QACA7D,gB,GAAAA,gB;QACAqD,uB,GAAAA,uB;QACA9C,oB,GAAAA,oB;QACAI,U,GAAAA,U;QACAQ,0B,GAAAA,0B;QACAe,0B,GAAAA,0B;QACAE,+B,GAAAA,+B;QACAyC,sB,GAAAA,sB;QACA/C,+B,GAAAA,+B","file":"../../detach/ExponentTools.js","sourcesContent":["// Copyright 2015-present 650 Industries. All rights reserved.\n\n'use strict';\n\nimport fs from 'fs';\nimport path from 'path';\nimport request from 'request';\nimport spawnAsyncQuiet from '@expo/spawn-async';\n\nfunction parseSdkMajorVersion(expSdkVersion) {\n  let sdkMajorVersion = 0;\n  try {\n    let versionComponents = expSdkVersion\n      .split('.')\n      .map(number => parseInt(number, 10));\n    sdkMajorVersion = versionComponents[0];\n  } catch (_) {}\n  return sdkMajorVersion;\n}\n\nfunction saveUrlToPathAsync(url, path) {\n  return new Promise(function(resolve, reject) {\n    let stream = fs.createWriteStream(path);\n    stream.on('close', () => {\n      if (getFilesizeInBytes(path) < 10) {\n        throw new Error(`{filename} is too small`);\n      }\n      resolve();\n    });\n    stream.on('error', reject);\n    request(url).pipe(stream);\n  });\n}\n\nfunction saveIconToPathAsync(projectRoot, pathOrURL, outPath) {\n  const localPath = path.resolve(projectRoot, pathOrURL);\n  return new Promise(function(resolve, reject) {\n    let stream = fs.createWriteStream(outPath);\n    stream.on('close', () => {\n      if (getFilesizeInBytes(outPath) < 10) {\n        throw new Error(`{filename} is too small`);\n      }\n      resolve();\n    });\n    stream.on('error', reject);\n    if (fs.existsSync(localPath)) {\n      fs.createReadStream(localPath).pipe(stream);\n    } else {\n      request(pathOrURL).pipe(stream);\n    }\n  });\n}\n\nfunction getFilesizeInBytes(path) {\n  let stats = fs.statSync(path);\n  let fileSizeInBytes = stats['size'];\n  return fileSizeInBytes;\n}\n\nasync function getManifestAsync(url, headers) {\n  let requestOptions = {\n    url: url.replace('exp://', 'http://') + '/index.exp',\n    headers,\n  };\n\n  let response = await request.promise(requestOptions);\n  let responseBody = response.body;\n  console.log('Using manifest:', responseBody);\n  let manifest = JSON.parse(responseBody);\n\n  return manifest;\n}\n\nasync function spawnAsyncThrowError(...args) {\n  if (args.length === 2) {\n    return spawnAsyncQuiet(args[0], args[1], {\n      stdio: 'inherit',\n      cwd: process.cwd(),\n    });\n  } else {\n    return spawnAsyncQuiet(...args);\n  }\n}\n\nasync function spawnAsync(...args) {\n  try {\n    return await spawnAsyncThrowError(...args);\n  } catch (e) {\n    console.error(e.message);\n  }\n}\n\nasync function transformFileContentsAsync(filename, transform) {\n  let fileString = await fs.promise.readFile(filename, 'utf8');\n  let newFileString = transform(fileString);\n  if (newFileString !== null) {\n    await fs.promise.writeFile(filename, newFileString);\n  }\n  return;\n}\n\nfunction getNormalizedPlistFilename(plistName) {\n  let plistFilename;\n  if (plistName.indexOf('.') !== -1) {\n    plistFilename = plistName;\n  } else {\n    plistFilename = `${plistName}.plist`;\n  }\n  return plistFilename;\n}\n\nasync function createBlankIOSPropertyListAsync(plistPath, plistName) {\n  // write empty json file\n  const emptyConfig = {};\n  const tmpConfigFile = path.join(plistPath, `${plistName}.json`);\n  await fs.promise.writeFile(tmpConfigFile, JSON.stringify(emptyConfig));\n\n  // convert to plist\n  let plistFilename = getNormalizedPlistFilename(plistName);\n  let configPlistName = path.join(plistPath, plistFilename);\n  await spawnAsyncThrowError('plutil', [\n    '-convert',\n    'xml1',\n    tmpConfigFile,\n    '-o',\n    configPlistName,\n  ]);\n\n  // remove tmp json file\n  await spawnAsyncThrowError('/bin/rm', [tmpConfigFile]);\n  return;\n}\n\n/**\n *  @param plistName base filename of property list. if no extension, assumes .plist\n */\nasync function modifyIOSPropertyListAsync(plistPath, plistName, transform) {\n  let plistFilename = getNormalizedPlistFilename(plistName);\n  let configPlistName = path.join(plistPath, plistFilename);\n  let configFilename = path.join(plistPath, `${plistName}.json`);\n\n  // grab original plist as json object\n  await spawnAsyncThrowError('plutil', [\n    '-convert',\n    'json',\n    configPlistName,\n    '-o',\n    configFilename,\n  ]);\n  let configContents = await fs.promise.readFile(configFilename, 'utf8');\n  let config;\n\n  try {\n    config = JSON.parse(configContents);\n  } catch (e) {\n    console.log(`Error parsing ${configFilename}`, e);\n    console.log('The erroneous file contents was:', configContents);\n    config = {};\n  }\n\n  // apply transformation\n  config = transform(config);\n\n  // back up old plist and swap in modified one\n  await spawnAsyncThrowError('/bin/cp', [\n    configPlistName,\n    `${configPlistName}.bak`,\n  ]);\n  await fs.promise.writeFile(configFilename, JSON.stringify(config));\n  await spawnAsyncThrowError('plutil', [\n    '-convert',\n    'xml1',\n    configFilename,\n    '-o',\n    configPlistName,\n  ]);\n  return config;\n}\n\nasync function cleanIOSPropertyListBackupAsync(\n  plistPath,\n  plistName,\n  restoreOriginal = true\n) {\n  let plistFilename = getNormalizedPlistFilename(plistName);\n  let configPlistName = path.join(plistPath, plistFilename);\n  let configFilename = path.join(plistPath, `${plistName}.json`);\n\n  if (restoreOriginal) {\n    await spawnAsyncThrowError('/bin/cp', [\n      `${configPlistName}.bak`,\n      configPlistName,\n    ]);\n  }\n\n  await spawnAsyncThrowError('/bin/rm', [`${configPlistName}.bak`]);\n  await spawnAsyncThrowError('/bin/rm', [configFilename]);\n  return;\n}\n\nfunction getAppleIconQualifier(iconSize, iconResolution) {\n  let iconQualifier;\n  if (iconResolution !== 1) {\n    // e.g. \"29x29@3x\"\n    iconQualifier = `${iconSize}x${iconSize}@${iconResolution}x`;\n  } else {\n    iconQualifier = `${iconSize}x${iconSize}`;\n  }\n  if (iconSize === 76 || iconSize === 83.5) {\n    // ipad sizes require ~ipad at the end\n    iconQualifier = `${iconQualifier}~ipad`;\n  }\n  return iconQualifier;\n}\n\n/**\n *  @return array [ width, height ] or nil if that fails for some reason.\n */\nasync function getImageDimensionsAsync(dirname, basename) {\n  if (process.platform !== 'darwin') {\n    console.warn('`sips` utility may or may not work outside of macOS');\n  }\n  let childProcess = await spawnAsyncThrowError(\n    'sips',\n    ['-g', 'pixelWidth', '-g', 'pixelHeight', basename],\n    {\n      cwd: dirname,\n    }\n  );\n  let dimensions;\n  try {\n    // stdout looks something like 'pixelWidth: 1200\\n pixelHeight: 800'\n    const components = childProcess.stdout.split(/(\\s+)/);\n    dimensions = components.map(c => parseInt(c, 10)).filter(n => !isNaN(n));\n  } catch (_) {}\n  return dimensions;\n}\n\n/**\n * Based on keys in the given manifest,\n * ensure that the proper iOS icon images exist -- assuming Info.plist already\n * points at them under CFBundleIcons.CFBundlePrimaryIcon.CFBundleIconFiles.\n *\n * This only works on MacOS (as far as I know) because it uses the sips utility.\n */\nasync function configureIOSIconsAsync(\n  manifest,\n  destinationIconPath,\n  projectRoot\n) {\n  if (process.platform !== 'darwin') {\n    console.warn('`sips` utility may or may not work outside of macOS');\n  }\n  let defaultIconFilename;\n  if (manifest.ios && manifest.ios.iconUrl) {\n    defaultIconFilename = 'exp-icon.png';\n    await saveUrlToPathAsync(\n      manifest.ios.iconUrl,\n      `${destinationIconPath}/${defaultIconFilename}`\n    );\n  } else if (manifest.iconUrl) {\n    defaultIconFilename = 'exp-icon.png';\n    await saveUrlToPathAsync(\n      manifest.iconUrl,\n      `${destinationIconPath}/${defaultIconFilename}`\n    );\n  } else if (projectRoot && manifest.icon) {\n    defaultIconFilename = 'exp-icon.png';\n    await saveIconToPathAsync(\n      projectRoot,\n      manifest.icon,\n      `${destinationIconPath}/${defaultIconFilename}`\n    );\n  }\n\n  let iconSizes = [20, 29, 40, 60, 76, 83.5];\n  iconSizes.forEach(iconSize => {\n    let iconResolutions;\n    if (iconSize === 76) {\n      // iPad has 1x and 2x icons for this size only\n      iconResolutions = [1, 2];\n    } else {\n      iconResolutions = [2, 3];\n    }\n    iconResolutions.forEach(async iconResolution => {\n      let iconQualifier = getAppleIconQualifier(iconSize, iconResolution);\n      // TODO(nikki): Support local paths for these icons\n      let iconKey = `iconUrl${iconQualifier}`;\n      let rawIconFilename;\n      let usesDefault = false;\n      if (manifest.ios && manifest.ios.hasOwnProperty(iconKey)) {\n        // manifest specifies an image just for this size/resolution, use that\n        rawIconFilename = `exp-icon${iconQualifier}.png`;\n        await saveUrlToPathAsync(\n          manifest.ios[iconKey],\n          `${destinationIconPath}/${rawIconFilename}`\n        );\n      } else {\n        // use default manifest.iconUrl\n        usesDefault = true;\n        if (defaultIconFilename) {\n          rawIconFilename = defaultIconFilename;\n        } else {\n          console.warn(\n            `Manifest does not specify ios.${iconKey} nor a default iconUrl. Bundle will use the Expo logo.`\n          );\n          return;\n        }\n      }\n\n      let iconFilename = `AppIcon${iconQualifier}.png`;\n      let iconSizePx = iconSize * iconResolution;\n      await spawnAsyncThrowError('/bin/cp', [rawIconFilename, iconFilename], {\n        stdio: 'inherit',\n        cwd: destinationIconPath,\n      });\n      await spawnAsyncThrowError('sips', ['-Z', iconSizePx, iconFilename], {\n        stdio: ['ignore', 'ignore', 'inherit'], // only stderr\n        cwd: destinationIconPath,\n      });\n\n      // reject non-square icons (because Apple will if we don't)\n      const dims = await getImageDimensionsAsync(\n        destinationIconPath,\n        iconFilename\n      );\n      if (!dims || dims.length < 2 || dims[0] !== dims[1]) {\n        throw new Error(\n          `iOS icons must be square, the dimensions of ${iconFilename} are ${dims}`\n        );\n      }\n\n      if (!usesDefault) {\n        // non-default icon used, clean up the downloaded version\n        await spawnAsyncThrowError('/bin/rm', [\n          path.join(destinationIconPath, rawIconFilename),\n        ]);\n      }\n    });\n  });\n\n  // clean up default icon\n  if (defaultIconFilename) {\n    await spawnAsyncThrowError('/bin/rm', [\n      path.join(destinationIconPath, defaultIconFilename),\n    ]);\n  }\n  return;\n}\n\nexport {\n  parseSdkMajorVersion,\n  saveUrlToPathAsync,\n  saveIconToPathAsync,\n  getManifestAsync,\n  getImageDimensionsAsync,\n  spawnAsyncThrowError,\n  spawnAsync,\n  transformFileContentsAsync,\n  modifyIOSPropertyListAsync,\n  cleanIOSPropertyListBackupAsync,\n  configureIOSIconsAsync,\n  createBlankIOSPropertyListAsync,\n};\n"],"sourceRoot":"/xdl/src"}