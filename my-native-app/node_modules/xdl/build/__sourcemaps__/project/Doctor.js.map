{"version":3,"sources":["project/Doctor.js"],"names":["async","projectRoot","await","Binaries","sourceBashLoginScriptsAsync","let","npmVersionResponse","spawnAsync","npmVersion","_","trim","stdout","semver","lt","MIN_NPM_VERSION","_isNpmVersionWithinRanges","BAD_NPM_VERSION_RANGES","ProjectUtils","logError","CORRECT_NPM_VERSION","WARNING","WARN_NPM_VERSION_RANGES","logWarning","clearNotification","e","NO_ISSUES","_checkNpmVersionAsync","Watchman","isPlatformSupported","watchmanVersion","unblockAndGetVersionAsync","MIN_WATCHMAN_VERSION","warningMessage","process","platform","_checkWatchmanVersionAsync","schemaPath","exp","pkg","readConfigJsonAsync","schema","JSON","parse","fs","readFile","promise","validateWithSchema","validateWithSchemaFileAsync","assetSchemas","ExpSchema","getAssetSchemasAsync","sdkVersion","Promise","all","map","fieldPath","meta","asset","contentTypePattern","contentTypeHuman","value","get","filePath","path","resolve","contentType","existsSync","fileType","readChunk","mime","request","head","url","headers","match","RegExp","configName","configFilenameAsync","Config","helpUrl","message","_validateAssetFieldsAsync","FATAL","expJsonExists","fileExistsAsync","join","appJsonExists","getSchemaAsync","errorMessage","dependencies","sdkVersions","Api","sdkVersionsAsync","keys","reactNativeIssue","_validateReactNativeVersionAsync","_validatePackageJsonAndExpJsonAsync","validation","reactNativeVersionWarnings","reactNative","reactNativeTag","sdkVersionObject","major","Versions","parseSdkVersionFromTag","nodeModulesPath","result","statSync","isDirectory","isFile","npmls","npmlsCommand","cwd","npmlsDependencies","errorStrings","forEach","versionRequired","dependency","installedDependency","version","peerMissing","push","satisfies","includes","from","length","_validateNodeModulesAsync","validateAsync","validateLowLatencyAsync","validateWithNetworkAsync","allowNetwork","status","newStatus","ignoreNodeModulesValidation","nodeModulesStatus","sdkPkg","EXPO_SDK_NOT_INSTALLED","mainFilePath","main","mainFile","EXPO_SDK_INSTALLED_AND_IMPORTED","EXPO_SDK_NOT_IMPORTED","getExpoSdkStatus","ranges","some","range","validator","jsonschema","Validator","validationResult","validate","fullMessage","errors","error","stack","replace"],"mappings":"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","file":"../../project/Doctor.js","sourcesContent":["/**\n * @flow\n */\n\nimport 'instapromise';\n\nimport _ from 'lodash';\nimport semver from 'semver';\nimport fs from 'fs';\nimport jsonschema from 'jsonschema';\nimport path from 'path';\nimport request from 'request';\nimport spawnAsync from '@expo/spawn-async';\nimport readChunk from 'read-chunk';\nimport fileType from 'file-type';\n\nimport * as ExpSchema from './ExpSchema';\nimport * as ProjectUtils from './ProjectUtils';\nimport Api from '../Api';\nimport * as Binaries from '../Binaries';\nimport Config from '../Config';\nimport * as Versions from '../Versions';\nimport * as Watchman from '../Watchman';\n\nexport const NO_ISSUES = 0;\nexport const WARNING = 1;\nexport const FATAL = 2;\n\nconst MIN_WATCHMAN_VERSION = '4.6.0';\nconst MIN_NPM_VERSION = '3.0.0';\nconst CORRECT_NPM_VERSION = '4.6.1';\nconst WARN_NPM_VERSION_RANGES = ['>= 5.0.0'];\nconst BAD_NPM_VERSION_RANGES = ['>= 5.0.0 <= 5.0.3'];\n\nfunction _isNpmVersionWithinRanges(npmVersion, ranges) {\n  return _.some(ranges, range => semver.satisfies(npmVersion, range));\n}\n\nasync function _checkNpmVersionAsync(projectRoot) {\n  try {\n    await Binaries.sourceBashLoginScriptsAsync();\n    let npmVersionResponse = await spawnAsync('npm', ['--version']);\n    let npmVersion = _.trim(npmVersionResponse.stdout);\n    if (\n      semver.lt(npmVersion, MIN_NPM_VERSION) ||\n      _isNpmVersionWithinRanges(npmVersion, BAD_NPM_VERSION_RANGES)\n    ) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Error: You are using npm version ${npmVersion}. We recommend version ${CORRECT_NPM_VERSION}. To install it, run 'npm i -g npm@${CORRECT_NPM_VERSION}'.`,\n        'doctor-npm-version'\n      );\n      return WARNING;\n    } else if (_isNpmVersionWithinRanges(npmVersion, WARN_NPM_VERSION_RANGES)) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: You are using npm version ${npmVersion}. There may be bugs in this version, use it at your own risk. We recommend version ${CORRECT_NPM_VERSION}.`,\n        'doctor-npm-version'\n      );\n    } else {\n      ProjectUtils.clearNotification(projectRoot, 'doctor-npm-version');\n    }\n  } catch (e) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Could not determine npm version. Make sure your version is >= ${MIN_NPM_VERSION} - we recommend ${CORRECT_NPM_VERSION}.`,\n      'doctor-npm-version'\n    );\n    return WARNING;\n  }\n\n  return NO_ISSUES;\n}\n\nasync function _checkWatchmanVersionAsync(projectRoot) {\n  // There's no point in checking any of this stuff if watchman isn't supported on this platform\n  if (!Watchman.isPlatformSupported()) {\n    ProjectUtils.clearNotification(projectRoot, 'doctor-watchman-version');\n    return;\n  }\n\n  let watchmanVersion = await Watchman.unblockAndGetVersionAsync(projectRoot);\n\n  // If we can't get the watchman version, `getVersionAsync` will return `null`\n  if (!watchmanVersion) {\n    // watchman is probably just not installed\n    ProjectUtils.clearNotification(projectRoot, 'doctor-watchman-version');\n    return;\n  }\n\n  if (semver.lt(watchmanVersion, MIN_WATCHMAN_VERSION)) {\n    let warningMessage = `Warning: You are using an old version of watchman (v${watchmanVersion}). This may cause problems for you.\\n\\nWe recommend that you either uninstall watchman (and XDE will try to use a copy it is bundled with) or upgrade watchman to a newer version, at least v${MIN_WATCHMAN_VERSION}.`;\n\n    // Add a note about homebrew if the user is on a Mac\n    if (process.platform === 'darwin') {\n      warningMessage += `\\n\\nIf you are using homebrew, try:\\nbrew uninstall watchman; brew install watchman`;\n    }\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      warningMessage,\n      'doctor-watchman-version'\n    );\n  } else {\n    ProjectUtils.clearNotification(projectRoot, 'doctor-watchman-version');\n  }\n}\n\nexport async function validateWithSchemaFileAsync(\n  projectRoot: string,\n  schemaPath: string\n): Promise<{ errorMessage?: string }> {\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  let schema = JSON.parse(await fs.readFile.promise(schemaPath, 'utf8'));\n  return validateWithSchema(exp, schema.schema, 'exp.json', 'UNVERSIONED');\n}\n\nexport function validateWithSchema(\n  exp: any,\n  schema: any,\n  configName: string,\n  sdkVersion: string\n): { errorMessage?: string } {\n  let validator = new jsonschema.Validator();\n  let validationResult = validator.validate(exp, schema);\n\n  let fullMessage;\n  if (validationResult.errors && validationResult.errors.length > 0) {\n    fullMessage = `Warning: Problem${validationResult.errors.length > 1\n      ? 's'\n      : ''} in ${configName}. See https://docs.expo.io/versions/v${sdkVersion}/guides/configuration.html.`;\n    for (let error of validationResult.errors) {\n      // Formate the message nicely\n      let message = error.stack\n        .replace(/instance\\./g, '')\n        .replace(/exists in instance/g, `exists in ${configName}`)\n        .replace('instance additionalProperty', 'additional property');\n      fullMessage += `\\n  - ${message}.`;\n    }\n  }\n\n  return { errorMessage: fullMessage };\n}\n\nasync function _validateAssetFieldsAsync(projectRoot, exp) {\n  try {\n    const assetSchemas = await ExpSchema.getAssetSchemasAsync(exp.sdkVersion);\n    await Promise.all(\n      assetSchemas.map(\n        async ({\n          fieldPath,\n          schema: { meta: { asset, contentTypePattern, contentTypeHuman } },\n        }) => {\n          const value = _.get(exp, fieldPath);\n          if (asset && value) {\n            if (contentTypePattern) {\n              // NOTE(nikki): The '4100' below should be enough for most file types, though we\n              //              could probably go shorter....\n              //              http://www.garykessler.net/library/file_sigs.html\n              const filePath = path.resolve(projectRoot, value);\n              const contentType = fs.existsSync(filePath)\n                ? fileType(await readChunk(filePath, 0, 4100)).mime\n                : (await request.promise.head({ url: value })).headers[\n                    'content-type'\n                  ];\n              if (!contentType.match(new RegExp(contentTypePattern))) {\n                const configName = await ProjectUtils.configFilenameAsync(\n                  projectRoot\n                );\n                ProjectUtils.logWarning(\n                  projectRoot,\n                  'expo',\n                  `Warning: Problem in ${configName}. Field '${fieldPath}' should point to a ${contentTypeHuman}, but the file at '${value}' has type '${contentType}'. See ${Config.helpUrl}`,\n                  `doctor-validate-asset-fields-${fieldPath}`\n                );\n              } else {\n                ProjectUtils.clearNotification(\n                  projectRoot,\n                  `doctor-validate-asset-fields-${fieldPath}`\n                );\n              }\n            }\n          }\n        }\n      )\n    );\n\n    ProjectUtils.clearNotification(projectRoot, 'doctor-validate-asset-fields');\n  } catch (e) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expon',\n      `Warning: Problem validating asset fields: ${e.message}.`,\n      'doctor-validate-asset-fields'\n    );\n  }\n}\n\nasync function _validatePackageJsonAndExpJsonAsync(\n  exp,\n  pkg,\n  projectRoot\n): Promise<number> {\n  if (!exp || !pkg) {\n    // readConfigJsonAsync already logged an error\n    return FATAL;\n  }\n\n  try {\n    await _checkWatchmanVersionAsync(projectRoot);\n  } catch (e) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Problem checking watchman version. ${e.message}.`,\n      'doctor-problem-checking-watchman-version'\n    );\n  }\n  ProjectUtils.clearNotification(\n    projectRoot,\n    'doctor-problem-checking-watchman-version'\n  );\n\n  const expJsonExists = await ProjectUtils.fileExistsAsync(\n    path.join(projectRoot, 'exp.json')\n  );\n  const appJsonExists = await ProjectUtils.fileExistsAsync(\n    path.join(projectRoot, 'app.json')\n  );\n\n  if (expJsonExists && appJsonExists) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Both app.json and exp.json exist in this directory. Only one should exist for a single project.`,\n      'doctor-both-app-and-exp-json'\n    );\n    return WARNING;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-both-app-and-exp-json');\n\n  let sdkVersion = exp.sdkVersion;\n  const configName = await ProjectUtils.configFilenameAsync(projectRoot);\n  try {\n    // TODO(perry) figure out a way to tell the schema validator whether this is exp.json or app.json\n    let schema = await ExpSchema.getSchemaAsync(sdkVersion);\n    let { errorMessage } = validateWithSchema(\n      exp,\n      schema,\n      configName,\n      sdkVersion\n    );\n\n    if (errorMessage) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        errorMessage,\n        'doctor-schema-validation'\n      );\n      return WARNING;\n    } else {\n      ProjectUtils.clearNotification(projectRoot, 'doctor-schema-validation');\n    }\n\n    ProjectUtils.clearNotification(\n      projectRoot,\n      'doctor-schema-validation-exception'\n    );\n  } catch (e) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Problem validating ${configName}: ${e.message}.`,\n      'doctor-schema-validation-exception'\n    );\n  }\n\n  // Warn if sdkVersion is UNVERSIONED\n  if (sdkVersion === 'UNVERSIONED') {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Using unversioned Expo SDK. Do not publish until you set sdkVersion in ${configName}`,\n      'doctor-unversioned'\n    );\n    return WARNING;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-unversioned');\n\n  // react-native is required\n  if (!pkg.dependencies || !pkg.dependencies['react-native']) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Can't find react-native in package.json dependencies`,\n      'doctor-no-react-native-in-package-json'\n    );\n    return WARNING;\n  }\n  ProjectUtils.clearNotification(\n    projectRoot,\n    'doctor-no-react-native-in-package-json'\n  );\n\n  // TODO(adam) set up caching for this\n  let sdkVersions = await Api.sdkVersionsAsync();\n  if (!sdkVersions) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Couldn't connect to SDK versions server`,\n      'doctor-versions-endpoint-failed'\n    );\n    return WARNING;\n  }\n  ProjectUtils.clearNotification(\n    projectRoot,\n    'doctor-versions-endpoint-failed'\n  );\n\n  if (!sdkVersions[sdkVersion]) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Invalid sdkVersion. Valid options are ${_.keys(\n        sdkVersions\n      ).join(', ')}`,\n      'doctor-invalid-sdk-version'\n    );\n    return WARNING;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-invalid-sdk-version');\n\n  const reactNativeIssue = await _validateReactNativeVersionAsync(\n    exp,\n    pkg,\n    projectRoot,\n    sdkVersions,\n    sdkVersion\n  );\n\n  if (reactNativeIssue !== NO_ISSUES) {\n    return reactNativeIssue;\n  }\n\n  // TODO: Check any native module versions here\n\n  return NO_ISSUES;\n}\n\nasync function _validateReactNativeVersionAsync(\n  exp,\n  pkg,\n  projectRoot,\n  sdkVersions,\n  sdkVersion\n): Promise<number> {\n  if (Config.validation.reactNativeVersionWarnings) {\n    let reactNative = pkg.dependencies['react-native'];\n\n    // TODO(2016-12-20): Remove the check for our old \"exponentjs\" org eventually\n    if (!reactNative.match(/(exponent(?:js)?|expo)\\/react-native/)) {\n      return NO_ISSUES;\n\n      // (TODO-2017-07-20): Validate the react-native version if it uses\n      // officially published package rather than Expo fork. Expo fork of\n      // react-native was required before CRNA. We now only run the react-native\n      // validation of the version if we are using the fork. We should probably\n      // validate the version here as well such that it matches with the\n      // react-native version compatible with the selected SDK.\n      //\n      // ProjectUtils.logWarning(\n      //   projectRoot,\n      //   'expo',\n      //   `Warning: Not using the Expo fork of react-native. See ${Config.helpUrl}.`,\n      //   'doctor-not-using-expo-fork'\n      // );\n      // return WARNING;\n    }\n    ProjectUtils.clearNotification(projectRoot, 'doctor-not-using-expo-fork');\n\n    try {\n      let reactNativeTag = reactNative.match(/sdk-\\d+\\.\\d+\\.\\d+/)[0];\n      let sdkVersionObject = sdkVersions[sdkVersion];\n\n      // TODO: Want to be smarter about this. Maybe warn if there's a newer version.\n      if (\n        semver.major(Versions.parseSdkVersionFromTag(reactNativeTag)) !==\n        semver.major(\n          Versions.parseSdkVersionFromTag(\n            sdkVersionObject['expoReactNativeTag']\n          )\n        )\n      ) {\n        ProjectUtils.logWarning(\n          projectRoot,\n          'expo',\n          `Warning: Invalid version of react-native for sdkVersion ${sdkVersion}. Use github:expo/react-native#${sdkVersionObject[\n            'expoReactNativeTag'\n          ]}`,\n          'doctor-invalid-version-of-react-native'\n        );\n        return WARNING;\n      }\n      ProjectUtils.clearNotification(\n        projectRoot,\n        'doctor-invalid-version-of-react-native'\n      );\n\n      ProjectUtils.clearNotification(\n        projectRoot,\n        'doctor-malformed-version-of-react-native'\n      );\n    } catch (e) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: ${reactNative} is not a valid version. Version must be in the form of sdk-x.y.z. Please update your package.json file.`,\n        'doctor-malformed-version-of-react-native'\n      );\n      return WARNING;\n    }\n  }\n\n  return NO_ISSUES;\n}\n\n// TODO: use `yarn check`\nasync function _validateNodeModulesAsync(projectRoot): Promise<number> {\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  let nodeModulesPath = projectRoot;\n  if (exp.nodeModulesPath) {\n    nodeModulesPath = path.join(projectRoot, exp.nodeModulesPath);\n  }\n\n  // Check to make sure node_modules exists at all\n  try {\n    let result = fs.statSync(path.join(nodeModulesPath, 'node_modules'));\n    if (!result.isDirectory()) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Error: node_modules directory is missing. Please run \\`npm install\\` in your project directory.`,\n        'doctor-node-modules-missing'\n      );\n      return FATAL;\n    }\n\n    ProjectUtils.clearNotification(projectRoot, 'doctor-node-modules-missing');\n  } catch (e) {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      `Error: node_modules directory is missing. Please run \\`npm install\\` in your project directory.`,\n      'doctor-node-modules-missing'\n    );\n    return FATAL;\n  }\n\n  // Check to make sure react native is installed\n  try {\n    let result = fs.statSync(\n      path.join(\n        nodeModulesPath,\n        'node_modules',\n        'react-native',\n        'local-cli',\n        'cli.js'\n      )\n    );\n    if (!result.isFile()) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Error: React native is not installed. Please run \\`npm install\\` in your project directory.`,\n        'doctor-react-native-not-installed'\n      );\n      return FATAL;\n    }\n\n    ProjectUtils.clearNotification(\n      projectRoot,\n      'doctor-react-native-not-installed'\n    );\n  } catch (e) {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      `Error: React native is not installed. Please run \\`npm install\\` in your project directory.`,\n      'doctor-react-native-not-installed'\n    );\n    return FATAL;\n  }\n\n  // Validate all package.json dependencies are installed and up to date\n  if (pkg.dependencies) {\n    await Binaries.sourceBashLoginScriptsAsync();\n\n    try {\n      await spawnAsync('npm', ['--version']);\n    } catch (e) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `\\`npm\\` command not found. If you have npm installed please run \\`npm install -g exp && exp path\\`.`,\n        'doctor-npm-not-found'\n      );\n      return WARNING;\n    }\n    ProjectUtils.clearNotification(projectRoot, 'doctor-npm-not-found');\n\n    let npmls;\n    try {\n      let npmlsCommand = await spawnAsync(\n        'npm',\n        ['ls', '--json', '--depth', '1'],\n        {\n          cwd: nodeModulesPath,\n        }\n      );\n      npmls = npmlsCommand.stdout;\n    } catch (e) {\n      npmls = e.stdout; // `npm ls` sometimes returns an error code\n    }\n\n    if (!npmls) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Problem checking node_modules dependencies. Could not run \\`npm ls\\` in ${projectRoot}.`,\n        'doctor-could-not-run-npm-ls'\n      );\n      return WARNING;\n    }\n    ProjectUtils.clearNotification(projectRoot, 'doctor-could-not-run-npm-ls');\n\n    let npmlsDependencies;\n    try {\n      npmlsDependencies = JSON.parse(npmls).dependencies;\n    } catch (e) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Problem checking node_modules dependencies: ${e.message}`,\n        'doctor-problem-checking-node-modules'\n      );\n      return WARNING;\n    }\n    ProjectUtils.clearNotification(\n      projectRoot,\n      'doctor-problem-checking-node-modules'\n    );\n\n    if (npmlsDependencies) {\n      let errorStrings = [];\n      _.forEach(pkg.dependencies, (versionRequired, dependency) => {\n        let installedDependency = npmlsDependencies[dependency];\n        if (dependency === 'react' && versionRequired.match(/alpha/)) {\n          // ignore alpha dependencies on react\n        } else if (!installedDependency || !installedDependency.version) {\n          if (installedDependency && installedDependency.peerMissing) {\n            errorStrings.push(\n              `Warning: '${dependency}' peer depencency missing. Run \\`npm ls\\` in ${nodeModulesPath} to see full warning.`\n            );\n          } else {\n            errorStrings.push(\n              `Warning: '${dependency}' dependency is not installed.`\n            );\n          }\n        } else if (\n          dependency !== 'react-native' &&\n          !semver.satisfies(installedDependency.version, versionRequired) &&\n          !versionRequired.includes(installedDependency.from)\n        ) {\n          // TODO: also check react-native\n          // For react native, `from` field looks like \"exponent/react-native#sdk-8.0.1\" and\n          // versionRequired looks like \"github:exponent/react-native#sdk-8.0.0\"\n          errorStrings.push(\n            `Warning: Installed version ${installedDependency.version} of '${dependency}' does not satisfy required version ${versionRequired}`\n          );\n        }\n      });\n\n      if (errorStrings.length > 0) {\n        errorStrings.push(\n          `\\nIf there is an issue running your project, please run \\`npm install\\` in ${nodeModulesPath} and restart.`\n        );\n        ProjectUtils.logWarning(\n          projectRoot,\n          'expo',\n          errorStrings.join('\\n'),\n          'doctor-node-modules-issues'\n        );\n        return WARNING;\n      } else {\n        ProjectUtils.clearNotification(\n          projectRoot,\n          'doctor-node-modules-issues'\n        );\n      }\n    }\n  }\n\n  return NO_ISSUES;\n}\n\nexport async function validateLowLatencyAsync(\n  projectRoot: string\n): Promise<number> {\n  return validateAsync(projectRoot, false);\n}\n\nexport async function validateWithNetworkAsync(\n  projectRoot: string\n): Promise<number> {\n  return validateAsync(projectRoot, true);\n}\n\nasync function validateAsync(\n  projectRoot: string,\n  allowNetwork: boolean\n): Promise<number> {\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n\n  let status = await _checkNpmVersionAsync(projectRoot);\n  if (status === FATAL) {\n    return status;\n  }\n\n  let newStatus = await _validatePackageJsonAndExpJsonAsync(\n    exp,\n    pkg,\n    projectRoot\n  );\n  if (newStatus > status) {\n    status = newStatus;\n  }\n\n  // Don't block this! It has to make network requests so it's slow.\n  if (allowNetwork) {\n    _validateAssetFieldsAsync(projectRoot, exp);\n  }\n\n  // TODO: this broke once we started using yarn because `npm ls` doesn't\n  // work on a yarn install. Use `yarn check` in the future.\n  if (status !== FATAL && exp && !exp.ignoreNodeModulesValidation) {\n    let nodeModulesStatus = await _validateNodeModulesAsync(projectRoot);\n    if (nodeModulesStatus > status) {\n      return nodeModulesStatus;\n    }\n  }\n\n  return status;\n}\n\nexport const EXPO_SDK_INSTALLED_AND_IMPORTED = 0;\nexport const EXPO_SDK_NOT_INSTALLED = 1;\nexport const EXPO_SDK_NOT_IMPORTED = 2;\n\nexport async function getExpoSdkStatus(projectRoot: string): Promise<number> {\n  let { pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n\n  try {\n    let sdkPkg;\n    if (pkg.dependencies['exponent']) {\n      sdkPkg = 'exponent';\n    } else if (pkg.dependencies['expo']) {\n      sdkPkg = 'expo';\n    } else {\n      return EXPO_SDK_NOT_INSTALLED;\n    }\n\n    let mainFilePath = path.join(projectRoot, pkg.main);\n    let mainFile = await fs.readFile.promise(mainFilePath, 'utf8');\n\n    // TODO: support separate .ios.js and .android.js files\n    if (\n      mainFile.includes(`from '${sdkPkg}'`) ||\n      mainFile.includes(`require('${sdkPkg}')`)\n    ) {\n      return EXPO_SDK_INSTALLED_AND_IMPORTED;\n    } else {\n      return EXPO_SDK_NOT_IMPORTED;\n    }\n  } catch (e) {\n    return EXPO_SDK_NOT_IMPORTED;\n  }\n}\n"],"sourceRoot":"/xdl/src"}